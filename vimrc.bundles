" ----------------------------------------------------------------------------
" Vim-Plug:Plgin management and setting
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/bundle')

let mapleader = ','
let g:mapleader = ','
let s:vim8 = has('patch-8.0.0039') && exists('*job_start')

" ----------------------------------------------------------------------------
" vim plugin bundle control, command model
" :PlugInstall     install
" :PlugInstall!    update
" :PlugClean       remove plugin not in list
" ----------------------------------------------------------------------------

" theme
Plug 'lifepillar/vim-solarized8'
Plug 'ishan9299/nvim-solarized-lua'
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'
Plug 'haishanh/night-owl.vim'
Plug 'Mofiqul/vscode.nvim', {'branch': 'main'}
Plug 'folke/tokyonight.nvim', { 'branch': 'main' }

" display
Plug 'nvim-lualine/lualine.nvim'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'akinsho/bufferline.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'nvim-tree/nvim-tree.lua'
nnoremap <leader>e :NvimTreeToggle<CR>
nnoremap <c-o> :NvimTreeFindFile<CR>

" nvim lsp
Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/mason.nvim', {'branch': 'main'}
Plug 'folke/lsp-trouble.nvim', {'branch': 'main'}

Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

" fast move
Plug 'easymotion/vim-easymotion'
Plug 'unblevable/quick-scope'
let g:qs_lazy_highlight = 1

"Plug 'ruanyl/vim-gh-line'

" fast edit
Plug 'github/copilot.vim', {'branch': 'release'}
Plug 'honza/vim-snippets'
Plug 'ruanyl/vim-es2015-snippets'
Plug 'tpope/vim-repeat'
Plug 'gcmt/wildfire.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'alvan/vim-closetag'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'kaplanz/nvim-retrail'
Plug 'scrooloose/nerdcommenter'
Plug 'editorconfig/editorconfig-vim'
Plug 'kevinhwang91/nvim-bqf', {'branch': 'main'}

Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}

let g:coc_global_extensions = [
    \'coc-yank',
    \'coc-spell-checker',
    \'coc-word',
    \'coc-snippets',
    \'coc-prettier',
    \'coc-lists',
    \'coc-highlight',
    \'coc-tsserver',
    \'coc-docthis',
    \'coc-html',
    \'coc-git',
    \]

nmap gc <Plug>(coc-git-commit)
nmap gs <Plug>(coc-git-chunkinfo)

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! s:show_documentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

inoremap <silent><expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <silent><expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
nmap <silent> <C-]> <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> K :call <SID>show_documentation()<CR>

" scroll float window
nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

vmap <leader>a  <Plug>(coc-codeaction-selected)<CR>
nmap <leader>a  <Plug>(coc-codeaction-selected)<CR>
nmap <Leader>bj <Plug>(coc-bookmark-next)
nmap <Leader>bk <Plug>(coc-bookmark-prev)

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
nmap <Leader>rf <Plug>(coc-refactor)
nmap <Leader>ff <Plug>(coc-format)
vmap <Leader>ff <Plug>(coc-format-selected)

let g:coc_snippet_next = '<c-j>'
let g:coc_snippet_prev = '<c-k>'

nmap <silent> <leader>j <Plug>(coc-diagnostic-next)
nmap <silent> <leader>k <Plug>(coc-diagnostic-prev)

autocmd CursorHold * silent call CocActionAsync('highlight')
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" CocList for mru, buffers and files
"nnoremap <leader>m :CocList mru<CR>
nnoremap <leader>m :Telescope oldfiles theme=dropdown<CR>
nnoremap <leader>b :Telescope buffers theme=dropdown<CR>
nnoremap <c-p> :Telescope find_files theme=dropdown<CR>


" coc-docthis
nnoremap <leader><leader>d :CocCommand docthis.documentThis<CR>

"Plug 'folke/persistence.nvim'
" Make sure rm -rf ~/.local/share/nvim/sessions
Plug 'Shatur/neovim-session-manager'
"Plug 'rmagatti/auto-session'
Plug 'plasticboy/vim-markdown'
Plug 'szw/vim-maximizer'
Plug 'mbbill/undotree'
nnoremap <leader>h :UndotreeToggle<CR>

"Plug 'ruanyl/vim-sort-imports', {'for': ['javascript', 'typescript', 'typescript.tsx', 'typescriptreact']}
let g:import_sort_auto = 1

Plug 'moll/vim-bbye'
Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/BufOnly.vim'

" search
Plug 'mhinz/vim-grepper'

"Load local plugins
if filereadable(expand("~/.vim/vimrc.bundles.local"))
  source ~/.vim/vimrc.bundles.local
endif
call plug#end()

" ----------------------------------------------------------------------------
" vim-grepper
" ----------------------------------------------------------------------------
nnoremap <Leader><Leader>a :GrepperRg<space>

" ----------------------------------------------------------------------------
" vim-maximizer
" ----------------------------------------------------------------------------
let g:maximizer_set_default_mapping = 0
nnoremap <tab> :MaximizerToggle<CR>

" ----------------------------------------------------------------------------
" vim-easymotion
" ----------------------------------------------------------------------------
map <space> <Plug>(easymotion-s2)
" map  / <Plug>(easymotion-sn)
" omap / <Plug>(easymotion-tn)
let g:EasyMotion_smartcase = 0

" ----------------------------------------------------------------------------
" wildfire.vim
" Mapping: <Enter>
" ----------------------------------------------------------------------------
let g:wildfire_objects = {
    \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
    \ "html,xml" : ["at"],
\ }
let g:wildfire_fuel_map = "<ENTER>"
let g:wildfire_water_map = "<BS>"

" ----------------------------------------------------------------------------
" vim-closetag
" ----------------------------------------------------------------------------
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml,*.js,*.tsx"
" Disables auto-close if not in a valid region (based on filetype)
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ 'typescriptreact': 'jsxRegion,tsxRegion',
    \ 'javascriptreact': 'jsxRegion',
    \ }

" ----------------------------------------------------------------------------
" vim-markdown
" ----------------------------------------------------------------------------
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_frontmatter=1

" ----------------------------------------------------------------------------
" vim-bbye
" ----------------------------------------------------------------------------
nnoremap qq :Bdelete<cr>

" ----------------------------------------------------------------------------
" BufOnly.vim
" ----------------------------------------------------------------------------
nnoremap <silent> qo :BufOnly<CR>
